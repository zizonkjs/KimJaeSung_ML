OneVsRestClassifier의 주요 인자들:
estimator:

실제로 학습할 이진 분류기를 지정합니다. 보통 LogisticRegression, SVC, DecisionTreeClassifier와 같은 분류 모델을 사용합니다.
n_jobs (기본값: None):

사용할 CPU 코어의 수를 지정합니다. 병렬 처리를 위해 사용할 수 있는 코어의 수를 설정할 수 있으며, -1로 설정하면 모든 가용 코어를 사용합니다.
verbose (기본값: 0):

학습 중의 진행 상황을 출력하는 정도를 지정합니다. verbose가 1 이상이면 진행 상태를 출력합니다.
동작 방식:
훈련(Training): 다중 클래스 문제에서 각 클래스에 대해 estimator로 지정한 모델을 사용하여 이진 분류기를 학습시킵니다.
예측(Prediction): 모든 이진 분류기의 예측 결과 중 가장 높은 확률을 가진 클래스가 최종 예측값으로 선택됩니다.

주요 Attributes:
estimators_:

각 클래스에 대해 학습된 이진 분류기의 리스트입니다. 각 분류기는 해당 클래스와 나머지 클래스들 사이를 구분하는 모델입니다.
예를 들어, 세 개의 클래스를 분류하는 경우 estimators_는 세 개의 분류기를 포함합니다.
classes_:

모델이 학습한 고유한 클래스 레이블들의 배열입니다. 이 배열은 분류 문제에서 예측할 수 있는 모든 클래스 레이블을 포함합니다.
n_classes_:

학습된 고유 클래스의 개수입니다. 예를 들어, 3개의 클래스를 분류하는 경우 이 값은 3이 됩니다.
n_jobs:

병렬 실행에 사용할 CPU 코어 수를 나타냅니다. n_jobs=-1로 설정된 경우, 모든 가용 CPU 코어를 사용하여 작업을 병렬로 실행합니다.

`OneVsRestClassifier` 클래스와 그 주요 메서드들에 대해 한국어로 설명드리겠습니다. 또한 각 메서드의 파라미터도 함께 설명하겠습니다.

### `OneVsRestClassifier` 클래스 개요:
- **설명**: `OneVsRestClassifier`는 다중 클래스 분류 문제를 해결하기 위해 사용하는 방법입니다. 이 방법은 각 클래스에 대해 이진 분류기를 만들어 다중 클래스를 분류합니다. 예를 들어, 3개의 클래스가 있으면 3개의 이진 분류기를 만들고, 각 분류기가 특정 클래스와 나머지 클래스를 구분하도록 학습합니다.

### 주요 메서드와 속성:

1. **`decision_function(X)`**:
   - **설명**: 입력 데이터(`X`)에 대해 각 클래스의 결정 경계와의 거리를 반환합니다. 이는 주로 이진 분류기에서 사용됩니다.
   - **파라미터**:
     - `X`: (n_samples, n_features) 형태의 데이터.
   - **결과**: 각 샘플에 대해 각 클래스의 결정 경계에서의 거리를 반환합니다.

2. **`fit(X, y, **fit_params)`**:
   - **설명**: 주어진 데이터(`X`)와 레이블(`y`)을 사용하여 모델을 학습시킵니다.
   - **파라미터**:
     - `X`: (n_samples, n_features) 형태의 데이터.
     - `y`: (n_samples,) 또는 (n_samples, n_classes) 형태의 타겟 값.
     - `**fit_params`: 서브 추정기의 `fit` 메서드에 전달할 추가 파라미터.
   - **결과**: 학습된 `OneVsRestClassifier` 인스턴스를 반환합니다.

3. **`get_metadata_routing()`**:
   - **설명**: 객체의 메타데이터 라우팅 정보를 가져옵니다.
   - **결과**: 메타데이터 라우팅 정보를 포함하는 객체를 반환합니다.

4. **`get_params(deep=True)`**:
   - **설명**: 추정기의 파라미터를 가져옵니다.
   - **파라미터**:
     - `deep`: 서브 객체의 파라미터까지 포함할지 여부를 설정하는 불리언 값.
   - **결과**: 파라미터 이름과 값을 매핑한 딕셔너리를 반환합니다.

5. **`partial_fit(X, y, classes=None, **partial_fit_params)`**:
   - **설명**: 메모리가 부족할 때 데이터를 여러 번 반복하여 학습할 수 있는 부분 학습 메서드입니다.
   - **파라미터**:
     - `X`: (n_samples, n_features) 형태의 데이터.
     - `y`: (n_samples,) 또는 (n_samples, n_classes) 형태의 타겟 값.
     - `classes`: 모든 호출에서 사용할 클래스의 배열, 처음 호출에만 필요.
     - `**partial_fit_params`: 서브 추정기의 `partial_fit` 메서드에 전달할 추가 파라미터.
   - **결과**: 부분적으로 학습된 `OneVsRestClassifier` 인스턴스를 반환합니다.

6. **`predict(X)`**:
   - **설명**: 주어진 데이터(`X`)에 대해 다중 클래스 레이블을 예측합니다.
   - **파라미터**:
     - `X`: (n_samples, n_features) 형태의 데이터.
   - **결과**: 예측된 다중 클래스 레이블을 반환합니다.

7. **`predict_proba(X)`**:
   - **설명**: 각 클래스에 대한 확률을 예측합니다.
   - **파라미터**:
     - `X`: (n_samples, n_features) 형태의 데이터.
   - **결과**: 각 샘플에 대한 클래스별 확률을 반환합니다.

8. **`score(X, y, sample_weight=None)`**:
   - **설명**: 주어진 테스트 데이터(`X`)와 레이블(`y`)에 대해 평균 정확도를 반환합니다.
   - **파라미터**:
     - `X`: (n_samples, n_features) 형태의 테스트 샘플.
     - `y`: (n_samples,) 또는 (n_samples, n_outputs) 형태의 타겟 레이블.
     - `sample_weight`: 샘플 가중치를 설정하는 배열.
   - **결과**: 모델의 평균 정확도를 나타내는 `float` 값을 반환합니다.

9. **`set_params(**params)`**:
   - **설명**: 추정기의 파라미터를 설정합니다.
   - **파라미터**:
     - `**params`: 설정할 파라미터 딕셔너리.
   - **결과**: 업데이트된 추정기 인스턴스를 반환합니다.

이러한 메서드와 파라미터들은 `OneVsRestClassifier`가 다중 클래스 분류 문제를 어떻게 해결하는지, 그리고 이를 어떻게 설정하고 사용할 수 있는지를 이해하는 데 도움이 됩니다.